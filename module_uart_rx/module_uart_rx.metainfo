-- -*- mode: lua -*-
-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints =
{
  rxBufferSize =
  {
    short   = "RX buffer size",
    long    = "Array for buffering bytes before they are received",
    help    = "",
    units   = "",
    type    = "int",
    resourceUsageFlags = {"linear","orthogonal"},
    min     = 8,
    max     = 64,
    default = 8
  },
  rxInitialBaudRate =
  {
    short   = "Initial baud rate",
    long    = "Initial baud setting on start-up",
    help    = "Initial baud setting on start-up. Can be changed dynamically later.",
    units   = "Bits Per Second",
    type    = "int",
    resourceUsageFlags = {"noeffect"},
    min     = 1,
    max     = 115200,
    default = 115200,
    define = "UART_RX_DEFAULT_BAUD"
  },
  rxInitialBPC =
  {
    short   = "Initial bits per character",
    long    = "Initial bits per character setting on start-up",
    help    = "Initial bits per character setting on start-up. Can be changed dynamically later.",
    type    = "int",
    units   = "bits",
    resourceUsageFlags = {"noeffect"},
    max     = 8,
    min     = 5,
    default = 8,
    define  = "UART_RX_DEFAULT_BITS_PER_BYTE"
  },
  rxInitialStopBits =
  {
    short   = "Initial stop bits",
    long    = "Initial stop bits setting on start-up",
    help    = "Initial stop bits setting on start-up. Can be changed dynamically later.",
    type    = "int",
    units   = "bits",
    resourceUsageFlags = {"noeffect"},
    max     = 2,
    min     = 0,
    default = 1,
    define  = "UART_RX_DEFAULT_STOP_BITS"
  },
  rxInitialParity =
  {
    short   = "Initial parity setting",
    long    = "Initial parity setting on start-up. Can be changed dynamically later.",
    help    = "",
    type    = "string",
    units   = "",
    resourceUsageFlags = {"noeffect"},
    options = {"UART_RX_PARITY_NONE", "UART_RX_PARITY_EVEN", "UART_RX_PARITY_ODD"},
    default = "UART_RX_PARITY_NONE"
  },
}

derivedValues = {}

ports = {
  p_uart_rx = {
    short   = "UART RX",
    long    = "UART RX Pin",
    help    = "",
    width   = 1
  }
}

channels = {
  c_rx_uart = {
    short = "RX channel",
    long  = "Channel for the client to send RX data to the Uart transitter",
    help  = "",
    type = "interface uart_rx_if",
  },
}        

function getConfigStatus()
  local status = "Valid Configuration"
  local issues = {}
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------

generatedCode = {
  includes = { 
    "uart_rx.h"
  },
  globals = [[
    in buffered port:1 p_uart_rx${swblock.id} = XS1_PORT_1A;
  ]],
  body = [[
    unsigned char rx_buffer[${swblock.params.rxBufferSize}];
    uart_rx(${swblock.chanends.c_rx_uart}, rx_buffer, ${swblock.params.rxBufferSize}, p_uart_rx${swblock.id});
  ]]
}

files = {["module_uart_rx/uart_rx_conf_example.h"] = "src/uart_rx_conf.h"}
